# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("lilith.pnl.gov", "startmeup"),
               BuildSlave("gld-wxp-64.pnl.gov", "startmeup"),
               BuildSlave("gld-wxp-32.pnl.gov", "startmeup"),
               BuildSlave("gld-rh4-32.pnl.gov", "startmeup"),
               BuildSlave("gld-rh4-64.pnl.gov", "startmeup"),
               BuildSlave("gld-rh5-32.pnl.gov", "startmeup"),
               BuildSlave("gld-rh5-64.pnl.gov", "startmeup")]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

#cvsroot = ":ext:%s@cvs.pnl.gov:/files0/CVS/GridlabD"
#cvsmodule = "GridlabD/source"

# Pre Sourceforge URL
#svn_url = "https://svn.pnl.gov/svn/Gridlab-D/trunk/source"

# Sourceforge URL
svn_url = "http://gridlab-d.svn.sourceforge.net/svnroot/gridlab-d/trunk"

#from localbb.changes.cvspoller import CVSPoller
#import localbb.changes.svnlistener 
#from buildbot.changes.svnpoller import SVNPoller
from localbb.changes.svnpoller import SVNPoller

listener = ('', 8833, 'Gridlab-D Gridlab-D Gridlab-D Gridlab-D')
#c['change_source'] = CVSPoller(cvsroot%'d3p181', cvsmodule, pollinterval=4*60*60,
#                          listener=listener)

#c['change_source'] = SVNPoller(svnurl=svn_url, svnuser="buildbot",svnpasswd="V3hUTh2d", pollinterval=4*60*60,listener=listener)
c['change_source'] = SVNPoller(svnurl=svn_url,pollinterval=60*60,listener=listener)

#localbb.changes.svnlistener.startSVNListener(c['change_source'],'Gridlab-D Gridlab-D Gridlab-D Gridlab-D',8833)

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler
from buildbot.scheduler import Nightly
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="all", branch=None,
                                 treeStableTimer=2*60,
                                 builderNames=["x64-full","win32-full2","linux-rh5-32-full","linux-rh5-64-full","linux-rh4-32-full","linux-rh4-64-full"]))
c['schedulers'].append(Nightly(name='win32-nightly',
                               builderNames=['win32-nightly2'],
                               hour=0,
                               minute=30))
c['schedulers'].append(Nightly(name='rh5-32-nightly',
                               builderNames=['rh5-32-nightly'],
                               hour=2,
                               minute=30))
c['schedulers'].append(Nightly(name='rh5-64-nightly',
                               builderNames=['rh5-64-nightly'],
                               hour=4,
                               minute=30))
c['schedulers'].append(Nightly(name='x64-nightly',
                               builderNames=['x64-nightly'],
                               hour=6,
                               minute=30))


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import Configure, Compile, ShellCommand
from buildbot.steps.python_twisted import Trial
from buildbot.steps.transfer import FileUpload
from localbb.steps.transfer import FileUploadOutput

# ========================= win32-full =========================
win32_full_factory = factory.BuildFactory()
win32_full_factory.addStep(SVN, workdir=r'build',svnurl=svn_url,username='buildbot',password="V3hUTh2d")
#win32_full_factory.addStep(SVN, workdir=r'build',svnurl=svn_url)
win32_full_factory.addStep(Compile, workdir=r'build\\VS2005',
           description=['32-bit compile'],
           descriptionDone=['32-bit compile'],
           command=['MSBuild', 'gridlabd.sln', '/t:Rebuild',
                    '/p:Platform=Win32;Configuration=Release', '/nologo'])
win32_full_factory.addStep(ShellCommand,
           workdir=r'build\\VS2005',
           name='installer',
           haltOnFailure=True,
           description=['building installer'],
           descriptionDone=['installer'],
           command=['iscc.exe', '/Fgridlabd-release', 'gridlabd.iss'])
win32_full_factory.addStep(FileUploadOutput,
           blocksize=64*1024,
           workdir=r'build\\VS2005\\Win32\\Release',
           slavesrc='gridlabd-release.exe',
           masterdest='gridlabd-release.exe')

# ========================= linux-full =========================
linux_rh_full_factory = factory.BuildFactory()
linux_rh_full_factory.addStep(SVN, workdir=r'build',svnurl=svn_url,username='buildbot',password="V3hUTh2d")
#linux_rh_full_factory.addStep(SVN, workdir=r'build',svnurl=svn_url")
linux_rh_full_factory.addStep(ShellCommand, workdir=r'build', name='autoreconf',
           description=['autoreconf'], descriptionDone=['autoreconf'],
           command=['autoreconf', '-is'])
linux_rh_full_factory.addStep(Configure, workdir=r'build')
linux_rh_full_factory.addStep(Compile, workdir=r'build', command=['make', 'over'])


# ========================= linux-nightly =========================
linux_rh_nightly_factory = factory.BuildFactory()
linux_rh_nightly_factory.addStep(SVN, workdir=r'build',svnurl=svn_url,username='buildbot',password="V3hUTh2d")
#linux_rh_nightly_factory.addStep(SVN, workdir=r'build',svnurl=svn_url")
linux_rh_nightly_factory.addStep(ShellCommand, workdir=r'build', name='autoreconf',
           description=['autoreconf'], descriptionDone=['autoreconf'],
           command=['autoreconf', '-is'])
linux_rh_nightly_factory.addStep(Configure, workdir=r'build', command=['./configure','--prefix=/tmp/gridlabd','--exec-prefix=/tmp/gridlabd'])
linux_rh_nightly_factory.addStep(Compile, workdir=r'build', command=['make', 'over'])
linux_rh_nightly_factory.addStep(ShellCommand, name='make_install',
           description='make_install',descriptionDone='make_install',
           workdir=r'build', command=['make', 'install'])
linux_rh_nightly_factory.addStep(ShellCommand,
           workdir=r'build',
           name='autotest',
           haltOnFailure=True, 
           description=['Testing Gridlabd'],
           timeout=60*120,
           descriptionDone=['autotest'],
           command=['python', 'validate.py','--idir=/tmp/gridlabd', '.'])
linux_rh_nightly_factory.addStep(ShellCommand, name='rpm_prep',
           description='rpm_prep',descriptionDone='rpm_prep',
           workdir=r'build', command=['make', 'rpm-prep'])
linux_rh_nightly_factory.addStep(ShellCommand, name='make_rpm',
           description='make_rpm',descriptionDone='make_rpm',
           workdir=r'build', command=['make', 'dist-rpm'])
linux_rh_nightly_factory.addStep(ShellCommand, workdir=r'build', name='cleanup_validate',
           description=['cleanup_validate'], descriptionDone=['cleanup_validate'],
           command=['rm', '-rf','/tmp/gridlabd/*'])
# TODO Add upload of RPM file to Sourceforge once the install has been independantly tested.

# ========================= x64-nightly =========================
x64_nightly_factory = factory.BuildFactory()
x64_nightly_factory.addStep(SVN, workdir=r'build',svnurl=svn_url,username='buildbot',password="V3hUTh2d")
#x64_nightly_factory.addStep(SVN, workdir=r'build',svnurl=svn_url")
x64_nightly_factory.addStep(ShellCommand,
           workdir=r'build',
           name='update_revision',
           haltOnFailure=False,
           description=['update revision'],
           descriptionDone=['update_revision'],
           command=['bash', 'utilities/gen_rev'])
x64_nightly_factory.addStep(ShellCommand,
           workdir=r'build',
           name='update_version',
           haltOnFailure=False,
           description=['update version'],
           descriptionDone=['update_version'],
           command=['bash', 'checkpkgs'])
x64_nightly_factory.addStep(Compile, workdir=r'build\\VS2005',
           description=['64-bit compile'],
           descriptionDone=['64-bit compile'],
           command=['build_x64.bat'])
x64_nightly_factory.addStep(ShellCommand,
           workdir=r'build',
           name='autotest',
           haltOnFailure=True, 
           description=['Testing Gridlabd'],
           descriptionDone=['autotest'],
           timeout=60*60,
           command=['python', 'validate.py', '.'])
x64_nightly_factory.addStep(ShellCommand,
           workdir=r'build\\VS2005',
           name='installer',
           haltOnFailure=True,
           description=['building installer'],
           descriptionDone=['installer'],
           command=['python','build_installer.py', 'gridlabd-x64','gridlabd-64.iss'])
x64_nightly_factory.addStep(ShellCommand,
           workdir=r'build\\VS2005',
           name='copy_installer',
           haltOnFailure=True,
           description=['copy installer'],
           descriptionDone=['copy installer'],
           command=['python','copy_installer.py', 'gridlabd-x64','..\\..\\releases'])
x64_nightly_factory.addStep(ShellCommand,
           workdir=r'build\\VS2005',
           name='sf_updater',
           haltOnFailure=True,
           description=['updating sourceforge'],
           descriptionDone=['sf_update'],
           command=['python','update_sourceforge.py','--prefix=gridlabd-x64-']) # Deletes files older than 5 days.
x64_nightly_factory.addStep(ShellCommand,
           workdir=r'build',
           name='upload_installer',
           haltOnFailure=False,
           description=['Upload nightly builds to Sourceforge'],
           descriptionDone=['upload_installer'],
           command=['rsync_wrapper.bat','../releases/','frs.sourceforge.net','/home/frs/project/g/gr/gridlab-d/gridlab-d/Nightly\ x64'])
x64_nightly_factory.addStep(FileUploadOutput,
           blocksize=64*1024,
           workdir=r'build\\VS2005\\x64\\Release',
           slavesrc='gridlabd-x64-nightly.exe',
           masterdest='gridlabd-x64-nightly.exe')



# ========================= x64-full =========================
x64_full_factory = factory.BuildFactory()
x64_full_factory.addStep(SVN, workdir=r'build',svnurl=svn_url,username='buildbot',password="V3hUTh2d")
x64_full_factory.addStep(Compile, workdir=r'build\\VS2005',
           description=['64-bit compile'],
           descriptionDone=['64-bit compile'],
           command=['build_x64.bat'])
x64_full_factory.addStep(ShellCommand,
           workdir=r'build\\VS2005',
           name='installer',
           haltOnFailure=True,
           description=['building installer'],
           descriptionDone=['installer'],
           command=['iscc.exe', '/Fgridlabd_x64-release', 'gridlabd-64.iss'])
x64_full_factory.addStep(FileUploadOutput,
           blocksize=64*1024,
           workdir=r'build\\VS2005\\x64\\Release',
           slavesrc='gridlabd_x64-release.exe',
           masterdest='gridlabd_x64-release.exe')
           
#f6 = factory.BuildFactory()
#f6.addStep(SVN, workdir=r'build',svnurl=svn_url,username='buildbot',password="V3hUTh2d")
#f6.addStep(ShellCommand, workdir=r'build', name='autoreconf',
#           description=['autoreconf'], descriptionDone=['autoreconf'],
#           command=['autoreconf', '-is'])
#f6.addStep(Configure, workdir=r'build')
#f6.addStep(Compile, workdir=r'build', command=['make', 'over'])
#f6.addStep(Compile, workdir=r'build', command=['make', 'doxygen-doc'],
#           description=['building docs'],
#           descriptionDone=['<a href="/docs">docs</a>'])
#f6.addStep(ShellCommand,
#           workdir=r'build',
#           name='copy',
#           haltOnFailure=True,
#           description=['Copy nightly build'],
#           descriptionDone=['copy'],
#           command=['cp', 'gridlabd_x64-nightly.exe', '/home/natet/gridlab_nightly'])
# Add a step to update Date on webpage

# ========================= win32-full2 =========================
win32_full2_factory = factory.BuildFactory()
win32_full2_factory.addStep(SVN, workdir=r'build',svnurl=svn_url,username='buildbot',password="V3hUTh2d")
#win32_full2_factory.addStep(SVN, workdir=r'build',svnurl=svn_url)
win32_full2_factory.addStep(Compile, workdir=r'build\\VS2005',
           description=['32-bit compile'],
           descriptionDone=['32-bit compile'],
           command=['MSBuild', 'gridlabd.sln', '/t:Rebuild',
                    '/p:Platform=Win32;Configuration=Release', '/nologo'])
win32_full2_factory.addStep(ShellCommand,
           workdir=r'build\\VS2005',
           name='installer',
           haltOnFailure=True,
           description=['building installer'],
           descriptionDone=['installer'],
           command=['iscc.exe', '/Fgridlabd-release', 'gridlabd.iss'])
win32_full2_factory.addStep(FileUploadOutput,
           blocksize=64*1024,
           workdir=r'build\\VS2005\\Win32\\Release',
           slavesrc='gridlabd-release.exe',
           masterdest='gridlabd-release.exe')

# ========================= win32-nightly2 =========================
win32_nightly2_factory = factory.BuildFactory()
win32_nightly2_factory.addStep(SVN, workdir=r'build',svnurl=svn_url,username='buildbot',password="V3hUTh2d")
#win32_nightly2_factory.addStep(SVN, workdir=r'build',svnurl=svn_url")
win32_nightly2_factory.addStep(ShellCommand,
           workdir=r'build',
           name='update_revision',
           haltOnFailure=False,
           description=['update revision'],
           descriptionDone=['update_revision'],
           command=['bash', 'utilities/gen_rev'])
win32_nightly2_factory.addStep(ShellCommand,
           workdir=r'build',
           name='update_version',
           haltOnFailure=False,
           description=['update version'],
           descriptionDone=['update_version'],
           command=['bash', 'checkpkgs'])
win32_nightly2_factory.addStep(Compile, workdir=r'build\\VS2005',
           description=['32-bit compile'],
           descriptionDone=['32-bit compile'],
           command=['MSBuild', 'gridlabd.sln', '/t:Rebuild',
                    '/p:Platform=Win32;Configuration=Release', '/nologo'])
win32_nightly2_factory.addStep(ShellCommand,
           workdir=r'build',
           name='autotest',
           haltOnFailure=True, 
           description=['Testing Gridlabd'],
           timeout=60*60,
           descriptionDone=['autotest'],
           command=['python', 'validate.py', '.'])
win32_nightly2_factory.addStep(ShellCommand,
           workdir=r'build\\VS2005',
           name='installer',
           haltOnFailure=True,
           description=['building installer'],
           descriptionDone=['installer'],
           command=['python','build_installer.py', 'gridlabd-win32'])
win32_nightly2_factory.addStep(ShellCommand,
           workdir=r'build\\VS2005',
           name='copy_installer',
           haltOnFailure=True,
           description=['copy installer'],
           descriptionDone=['copy installer'],
           command=['python','copy_installer.py', 'gridlabd-win32','..\\..\\releases'])
win32_nightly2_factory.addStep(ShellCommand,
           workdir=r'build\\VS2005',
           name='sf_updater',
           haltOnFailure=True,
           description=['updating sourceforge'],
           descriptionDone=['sf_update'],
           command=['python','update_sourceforge.py']) # Deletes files older than 5 days.
win32_nightly2_factory.addStep(ShellCommand,
           workdir=r'build',
           name='upload_installer',
           haltOnFailure=False,
           description=['Upload nightly builds to Sourceforge'],
           descriptionDone=['upload_installer'],
           command=['rsync_wrapper.bat','../releases/','frs.sourceforge.net','/home/frs/project/g/gr/gridlab-d/gridlab-d/Nightly\ Win32'])
win32_nightly2_factory.addStep(FileUploadOutput,
           blocksize=64*1024,
           workdir=r'build\\VS2005\\Win32\\Release',
           slavesrc='gridlabd-win32-nightly.exe',
           masterdest='gridlabd-win32-nightly.exe')
win32_nightly2_factory.addStep(ShellCommand,
           workdir=r'build',
           name='doxygen',
           haltOnFailure=True,
           description=['Build Current Documentation'],
           descriptionDone=['doxygen'],
           command=['doxygen.exe', 'doxygen\\gridlabd.conf'])
win32_nightly2_factory.addStep(ShellCommand,
           workdir=r'build',
           name='copy_docs',
           haltOnFailure=False,
           description=['Copy nightly build documentation'],
           descriptionDone=['copy_docs'],
           command=['rsync_wrapper.bat','../documents/html/*','web.sourceforge.net','htdocs/doxygen'])
win32_nightly2_factory.addStep(ShellCommand,
           workdir=r'build',
           name='generate_troubleshooting',
           haltOnFailure=False,
           description=['generate troubleshooting'],
           descriptionDone=['generate_troubleshooting'],
           command=['bash', 'generate_troubleshooting.sh'])
win32_nightly2_factory.addStep(ShellCommand,
           workdir=r'build',
           name='copy_troubleshooting',
           haltOnFailure=False,
           description=['Copy troubleshooting documentation'],
           descriptionDone=['copy_troubleshooting'],
           command=['rsync_wrapper.bat','../documents/troubleshooting/*','web.sourceforge.net','htdocs/troubleshooting'])

#b1 = {'name': "win32-full",
#      'slavename': "we11651.pnl.gov",
#      'builddir': "win32-full",
#      'factory': win32_full_factory,
#      }
x64_nightly_builder = {'name': "x64-nightly",
      'slavename': "gld-wxp-64.pnl.gov",
      'builddir': "x64-nightly",
      'factory': x64_nightly_factory,
      }
  
x64_full_builder = {'name': "x64-full",
      'slavename': "gld-wxp-64.pnl.gov",
      'builddir': "x64-full",
      'factory': x64_full_factory,
      }
win32_full2_builder = {'name': "win32-full2",
      'slavename': "gld-wxp-32.pnl.gov",
      'builddir': "win32-full2",
      'factory': win32_full2_factory,
      }
win32_nightly2_builder = {'name': "win32-nightly2",
      'slavename': "gld-wxp-32.pnl.gov",
      'builddir': "win32-nightly2",
      'factory': win32_nightly2_factory,
      }
rh5_32_full_builder = {'name': "linux-rh5-32-full",
      'slavename': "gld-rh5-32.pnl.gov",
      'builddir': "linux-rh5-32-full",
      'factory': linux_rh_full_factory,
      }
      
rh5_32_nightly_builder = {'name': "rh5-32-nightly",
      'slavename': "gld-rh5-32.pnl.gov",
      'builddir': "rh5-32-nightly",
      'factory': linux_rh_nightly_factory,
      }
rh5_64_full_builder = {'name': "linux-rh5-64-full",
      'slavename': "gld-rh5-64.pnl.gov",
      'builddir': "linux-rh5-64-full",
      'factory': linux_rh_full_factory,
      }
      
rh5_64_nightly_builder = {'name': "rh5-64-nightly",
      'slavename': "gld-rh5-64.pnl.gov",
      'builddir': "rh5-64-nightly",
      'factory': linux_rh_nightly_factory,
      }

c['builders'] = [x64_full_builder, 
                 x64_nightly_builder, 
                 win32_full2_builder, 
                 win32_nightly2_builder, 
                 rh5_32_full_builder, 
                 rh5_32_nightly_builder, 
                 rh5_64_full_builder, 
                 rh5_64_nightly_builder]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html, mail
from twisted.web import static
from buildbot.status.web import build
from localbb.status.html import OutputList
from doxysearch import SearchResource as DoxygenSearch

# Override the resource status page to provide output listing
_OutputStatusBase = build.StatusResourceBuild
class OutputStatus(_OutputStatusBase):
    def getChild(self, path, request):
        if path == 'output':
            return OutputList(self.build_status.getBuilder().getName(),
                              self.build_status.getNumber())
        return _OutputStatusBase.getChild(self, path, request)
build.StatusResourceBuild = OutputStatus

search = DoxygenSearch('../slaves/linux-full/linux-full/documents/html')
docs = static.File('../slaves/linux-full/linux-full/documents/html')
docs.putChild('search.php', search)
status = html.WebStatus(http_port=8080, allowForce=True)
status.putChild('docs', docs)
status.putChild('gridlab-docs', docs)

c['status'].append(status)

from zope.interface.declarations import implements
from buildbot.interfaces import IEmailLookup
from twisted.python import log
import ldap

class PNLLookup:
    if implements:
        implements(IEmailLookup)
    else:
        __implements__ = IEmailLookup

    def __init__(self):
        self.users = {'mhauer'  :'matthew.hauer@pnl.gov',
                      'ftuffner':'Francis.Tuffner@pnl.gov',
                      'yschen'  :'yousu.chen@pnl.gov',
                      'tacarlon':'teresa.carlon@pnl.gov',
                      'kevinschneider':'kevin.schneider@pnl.gov',
                      'jcfuller':'Jason.Fuller@pnl.gov',
                      'jmmcall':'Jon.McCall@pnl.gov',
                      'ssjin2008':'Shuangshuang.Jin@pnl.gov',
                      'selbert':'steve.elbert@pnl.gov',
                      'kris1':'Krishnappa.Subbarao@pnl.gov',
                      'jreyes-spindola':'Jorge.Reyes.Spindola@pnl.gov',
                      'dchassin':'David.Chassin@pnl.gov',
                      'robpratt':'robert.pratt@pnl.gov',
                      'andyfisher':'andrew.fisher@pnl.gov',
                      'salekhnovich':'sergey.alekhnovich@pnl.gov',
                      'ctugur':'cristina.tugurlan@pnl.gov'}

    def getAddress(self, user):
        if user in self.users:
            mail = self.users[user]
        else:
            mail = user + "@users.sourceforge.net"
        return mail

c['status'].append(mail.MailNotifier(
        fromaddr="gridlabd@pnl.gov",
        extraRecipients=["nathan.tenney@pnl.gov","matthew.hauer@pnl.gov","jason.fuller@pnl.gov","ruslan.doroshchuk@pnl.gov","andrew.fisher@pnl.gov","cristina.tugurlan@pnl.gov"],
        relayhost="smtpmail2.pnl.gov", lookup=PNLLookup()))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Gridlab-D"
c['projectURL'] = "/docs"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://gridlabd.pnl.gov:8080/"
